// File: /api/generate-ad.js
import { GoogleGenAI, Modality } from '@google/genai';
import { verifyUser } from './utils/auth.js';
import { db } from './utils/db.js';

const AD_COST = 2;

function buildPromptFromOptions(options, customPrompt) {
    let promptParts = [
        "Create a high-quality, professional, and creative advertisement photo in Vietnamese context.",
        "Focus on the product as the hero element."
    ];
    if (options.industry && options.industry !== 'Auto') promptParts.push(`The product is for the '${options.industry}' industry.`);
    if (options.pose && options.pose !== 'Auto' && options.modelImage) promptParts.push(`A model is presenting the product with a '${options.pose}' pose.`);
    if (options.ratio && options.ratio !== 'Auto') promptParts.push(`The product shot should be '${options.ratio}'.`);
    if (options.background && options.background !== 'Auto') promptParts.push(`The background is '${options.background}'.`);
    if (options.props && options.props !== 'Auto') promptParts.push(`Include props like '${options.props}'.`);
    if (options.lighting && options.lighting !== 'Auto') promptParts.push(`The lighting style should be '${options.lighting}'.`);
    if (customPrompt) promptParts.push(`Additional creative direction: "${customPrompt}".`);
    promptParts.push("The final image should look stunning, clean, and commercially appealing.");
    return promptParts.join(' ');
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ message: `Method ${req.method} Not Allowed` });
  }

  let user;
  try {
    user = await verifyUser(req);
     if (user.status !== 'approved') {
      return res.status(403).json({ message: `Your account status is: ${user.status}. Access denied.` });
    }
    if (user.credits < AD_COST) {
      return res.status(402).json({ message: `Insufficient credits. This action requires ${AD_COST} credits.` });
    }
  } catch (error) {
    return res.status(401).json({ message: error.message || 'Authentication failed.' });
  }

  try {
    const { productImage, modelImage, options, customPrompt } = req.body;

    if (!productImage?.base64 || !productImage?.mimeType || !options) {
      return res.status(400).json({ message: 'Missing required product image or options data.' });
    }
    
    const apiKey = process.env.API_KEY;
    if (!apiKey) {
      return res.status(500).json({ message: "Server configuration error: API key not found." });
    }
    const ai = new GoogleGenAI({ apiKey });
    
    const prompt = buildPromptFromOptions(options, customPrompt);
    const contentParts = [
        { text: prompt },
        { inlineData: { data: productImage.base64, mimeType: productImage.mimeType } }
    ];
    if (modelImage?.base64) {
        contentParts.push({ inlineData: { data: modelImage.base64, mimeType: modelImage.mimeType } });
    }

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: { parts: contentParts },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });
    
    const generatedImagePart = response.candidates?.[0]?.content?.parts?.find(p => p.inlineData);

    if (generatedImagePart) {
      await db.updateUser(user.id, { credits: user.credits - AD_COST });
      res.status(200).json(generatedImagePart.inlineData);
    } else {
      const textPart = response.candidates?.[0]?.content?.parts?.find(p => p.text);
      const errorMessage = textPart?.text || 'No image was generated by the model.';
      res.status(500).json({ message: errorMessage });
    }

  } catch (error) {
    console.error('Error calling Gemini API for Ad generation:', error);
    res.status(500).json({ message: `An internal server error occurred: ${error.message}` });
  }
}
